From efbc74395a17f2c0af43160bbce682546c9cd5fd Mon Sep 17 00:00:00 2001
From: jhenrique09 <jhsv09@gmail.com>
Date: Thu, 10 Feb 2022 22:27:30 -0300
Subject: [PATCH] Settings: Squash import of Face Unlock for S

Author: jhenrique09 <jhenrique09.mcz@hotmail.com>
Date:   Sun Mar 7 01:26:34 2021 -0300

    Settings: Allow using face as auth method for apps

    Change-Id: Ib259d1f020f9ac29a9d85ae7edba55a2b2daa101

Author: jhenrique09 <jhsv09@gmail.com>
Date:   Fri Jun 18 11:56:26 2021 -0300

    [2/2] Allow changing face unlock method when locked

    Change-Id: I143bde86acc2a4ada27c0ef739eb87d20cfc6512

Author: jhenrique09 <jhsv09@gmail.com>
Date:   Thu Feb 10 22:27:30 2022 -0300

    Initial import of Face Unlock for S

    Change-Id: I178b63d73f14742cf890cb05386ad4e82fd8c2be

[libxzr] Reformat and adapt kscope
Change-Id: Iac38f3f5f4628fbedbd711c7d9268e9eda0624da
Signed-off-by: LibXZR <i@xzr.moe>

[bigsaltyfishes] Adapt miku

Conflicts:
	Android.bp
	AndroidManifest.xml
	res/values/kscope_arrays.xml
	res/values/kscope_strings.xml
---
 Android.bp                                    |   1 +
 AndroidManifest.xml                           |  17 +-
 res/layout/face_enroll_button.xml             |  32 ----
 .../face_enroll_introduction_invisible.xml    | 164 ++++++++++++++++++
 res/layout/face_remove_button.xml             |  32 ----
 res/values/miku_arrays.xml                    |  12 ++
 res/values/miku_strings.xml                   |   9 +
 res/xml/configure_notification_settings.xml   |  14 +-
 res/xml/security_lockscreen_settings.xml      |  11 ++
 .../security_settings_combined_biometric.xml  |   3 +-
 res/xml/security_settings_face.xml            |  42 +++--
 .../BiometricEnrollIntroduction.java          |   2 +-
 ...metricSettingsAppPreferenceController.java |   3 +-
 ...cSettingsKeyguardPreferenceController.java |   3 +-
 ...iometricWaysToUsePreferenceController.java |  34 ++++
 .../face/FaceEnrollIntroduction.java          |  76 ++++++++
 ...FaceProfileStatusPreferenceController.java |   4 +
 .../biometrics/face/FaceSettings.java         |  26 ++-
 .../FaceSettingsAppPreferenceController.java  |   3 +-
 ...SettingsAttentionPreferenceController.java |   3 +-
 ...ceSettingsConfirmPreferenceController.java |   4 +
 ...tingsEnrollButtonPreferenceController.java |  19 +-
 ...eSettingsKeyguardPreferenceController.java |   4 +-
 ...sLockscreenBypassPreferenceController.java |  11 +-
 ...creenUnlockMethodPreferenceController.java |  60 +++++++
 ...tingsRemoveButtonPreferenceController.java |  45 ++---
 .../face/FaceStatusPreferenceController.java  |  11 ++
 ...aceUnlockCategoryPreferenceController.java |   4 +-
 .../settings/custom/biometrics/FaceUtils.java |  32 ++++
 .../biometrics/face/FaceEnrollActivity.java   |  36 ++++
 .../FaceSettingsRedoPreferenceController.java | 144 +++++++++++++++
 .../contextualcards/FaceReEnrollDialog.java   |   7 +-
 32 files changed, 723 insertions(+), 145 deletions(-)
 delete mode 100644 res/layout/face_enroll_button.xml
 create mode 100644 res/layout/face_enroll_introduction_invisible.xml
 delete mode 100644 res/layout/face_remove_button.xml
 create mode 100644 src/com/android/settings/biometrics/combination/BiometricWaysToUsePreferenceController.java
 create mode 100644 src/com/android/settings/biometrics/face/FaceSettingsLockscreenUnlockMethodPreferenceController.java
 create mode 100644 src/com/android/settings/custom/biometrics/FaceUtils.java
 create mode 100644 src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
 create mode 100644 src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java

diff --git a/Android.bp b/Android.bp
index f88e7ac626..315e66e887 100644
--- a/Android.bp
+++ b/Android.bp
@@ -84,6 +84,7 @@ android_library {
         "lottie",
         "windowExtLib",
         "VendorSettings-preference",
+        "faceunlock_framework",
     ],
 
     libs: [
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 0769f523e5..175c7f09de 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -112,6 +112,10 @@
     <uses-permission android:name="android.permission.LAUNCH_MULTI_PANE_SETTINGS_DEEP_LINK" />
     <uses-permission android:name="android.permission.ALLOW_PLACE_IN_MULTI_PANE_SETTINGS" />
 
+    <!-- Face Unlock -->
+    <uses-permission android:name="com.android.settings.FACE_UNLOCK"/>
+    <permission android:name="com.android.settings.FACE_UNLOCK" android:protectionLevel="signatureOrSystem"/>
+
     <application
             android:name=".SettingsApplication"
             android:label="@string/settings_label"
@@ -4262,7 +4266,7 @@
         </activity>
 
 
-	<!-- MikuSettings -->
+	    <!-- MikuSettings -->
         <activity android:name=".Settings$MikuSettingsActivity"
             android:label="@string/miku_settings_title"
             android:parentActivityName="com.android.settings"
@@ -4275,6 +4279,17 @@
                 android:value="com.miku.exsettings.MikuSettings" />
         </activity>
 
+        <!-- Face unlock -->
+        <activity android:name="com.android.settings.custom.biometrics.face.FaceEnrollActivity"
+            android:permission="com.android.settings.FACE_UNLOCK"
+            android:theme="@style/Transparent"
+            android:exported="true">
+            <intent-filter android:priority="1">
+                <action android:name="com.android.settings.intent.action.FACE_ENROLL"/>
+                <category android:name="android.intent.category.DEFAULT"/>
+            </intent-filter>
+        </activity>
+
         <!-- This is the longest AndroidManifest.xml ever. -->
     </application>
 </manifest>
diff --git a/res/layout/face_enroll_button.xml b/res/layout/face_enroll_button.xml
deleted file mode 100644
index 09094d507d..0000000000
--- a/res/layout/face_enroll_button.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2019 The Android Open Source Project
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License
-  -->
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:minHeight="?android:attr/listPreferredItemHeight">
-
-    <Button
-        android:id="@+id/security_settings_face_settings_enroll_button"
-        style="@style/SudGlifButton.Primary"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="start"
-        android:layout_marginStart="20dp"
-        android:text="@string/security_settings_face_settings_enroll"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/res/layout/face_enroll_introduction_invisible.xml b/res/layout/face_enroll_introduction_invisible.xml
new file mode 100644
index 0000000000..ccba3437fe
--- /dev/null
+++ b/res/layout/face_enroll_introduction_invisible.xml
@@ -0,0 +1,164 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (C) 2021 The Android Open Source Project
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~      http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<com.google.android.setupdesign.GlifLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    style="?attr/face_layout_theme"
+    android:id="@+id/setup_wizard_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    app:sudDescriptionText="@string/security_settings_face_enroll_introduction_message"
+    android:visibility="invisible">
+
+    <LinearLayout
+        style="@style/SudContentFrame"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:clipChildren="false"
+        android:clipToPadding="false"
+        android:orientation="vertical"
+        android:layout_marginStart="?attr/sudMarginStart"
+        android:layout_marginEnd="?attr/sudMarginEnd">
+
+        <com.google.android.setupdesign.view.RichTextView
+            android:id="@+id/error_text"
+            style="@style/SudDescription.Glif"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:visibility="gone"/>
+
+        <FrameLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content">
+
+            <ImageView
+                style="@style/SudContentIllustration"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:contentDescription="@null"
+                android:src="@drawable/face_enroll_intro_illustration"/>
+
+        </FrameLayout>
+
+        <!-- Contains the extra information text at the bottom -->
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical">
+
+            <!-- Keep in mind -->
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroTitle"
+                android:text="@string/security_settings_face_enroll_introduction_info_title" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal">
+
+                <ImageView
+                    android:id="@+id/icon_glasses"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:background="@drawable/ic_face_enroll_introduction_glasses"/>
+                <Space
+                    android:layout_width="16dp"
+                    android:layout_height="wrap_content"/>
+                <TextView
+                    android:id="@+id/info_message_glasses"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    style="@style/BiometricEnrollIntroMessage" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal">
+
+                <ImageView
+                    android:id="@+id/icon_looking"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:background="@drawable/ic_face_enroll_introduction_visibility"/>
+                <Space
+                    android:layout_width="16dp"
+                    android:layout_height="wrap_content"/>
+                <TextView
+                    android:id="@+id/info_message_looking"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    style="@style/BiometricEnrollIntroMessage" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:id="@+id/info_row_require_eyes"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:visibility="gone">
+
+                <ImageView
+                    android:id="@+id/icon_require_eyes"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:background="@drawable/ic_settings_24dp"/>
+                <Space
+                    android:layout_width="16dp"
+                    android:layout_height="wrap_content"/>
+                <TextView
+                    android:id="@+id/info_message_require_eyes"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    style="@style/BiometricEnrollIntroMessage" />
+            </LinearLayout>
+
+            <!-- How it works -->
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroTitle"
+                android:text="@string/security_settings_face_enroll_introduction_how_title" />
+
+            <TextView
+                android:id="@+id/how_message"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroMessage" />
+
+            <!-- You're in control -->
+            <TextView
+                android:id="@+id/title_in_control"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroTitle" />
+
+            <TextView
+                android:id="@+id/message_in_control"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                style="@style/BiometricEnrollIntroMessage"
+                android:paddingBottom="0dp" />
+
+        </LinearLayout>
+
+    </LinearLayout>
+
+</com.google.android.setupdesign.GlifLayout>
diff --git a/res/layout/face_remove_button.xml b/res/layout/face_remove_button.xml
deleted file mode 100644
index ea860d5caa..0000000000
--- a/res/layout/face_remove_button.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2018 The Android Open Source Project
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  -->
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:minHeight="?android:attr/listPreferredItemHeight">
-
-    <Button
-        android:id="@+id/security_settings_face_settings_remove_button"
-        style="@style/SudGlifButton.Primary"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="start"
-        android:layout_marginStart="20dp"
-        android:text="@string/security_settings_face_settings_remove_face_model"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/res/values/miku_arrays.xml b/res/values/miku_arrays.xml
index 63a84bd066..c8052edb20 100644
--- a/res/values/miku_arrays.xml
+++ b/res/values/miku_arrays.xml
@@ -44,4 +44,16 @@
         <item>259200000</item>
     </string-array>
 
+    <!-- Face Unlock -->
+    <string-array name="face_unlock_method_entries">
+        <item>@string/face_unlock_method_default</item>
+        <item>@string/face_unlock_method_swipe</item>
+    </string-array>
+    
+    <string-array name="face_unlock_method_values">
+        <item>0</item>
+        <item>1</item>
+    </string-array>
+    
+
 </resources>
\ No newline at end of file
diff --git a/res/values/miku_strings.xml b/res/values/miku_strings.xml
index 2b31c0998d..6c4418b767 100644
--- a/res/values/miku_strings.xml
+++ b/res/values/miku_strings.xml
@@ -82,4 +82,13 @@
     <string name="lockscreen_tweaks_category_title">Lockscreen gestures</string>
     <string name="double_tap_sleep_lockscreen_title">Double tap to sleep on lockscreen</string>
 
+    <!-- Face Unlock -->
+    <string name="security_settings_face_unlock_redo_face_scan_summary">Remove existing face scan and create a new scan</string>
+    <string name="security_settings_face_unlock_redo_face_scan_title">Redo face scan</string>
+    <string name="face_redo_confirm_btn">Redo</string>
+    <string name="face_redo_warning_msg">Do you want to remove the existing face scan and create a new one?</string>
+    <string name="face_unlock_method_title">Allow face unlock on lock screen</string>
+    <string name="face_unlock_method_default">When the screen is turned on</string>
+    <string name="face_unlock_method_swipe">When swiping on lock screen</string>
+
 </resources>
diff --git a/res/xml/configure_notification_settings.xml b/res/xml/configure_notification_settings.xml
index 4e58e66887..0f88adddba 100644
--- a/res/xml/configure_notification_settings.xml
+++ b/res/xml/configure_notification_settings.xml
@@ -98,9 +98,21 @@
             android:summary="@string/lock_screen_notifs_redact_work_summary"
             settings:controller="com.android.settings.notification.RedactNotificationPreferenceController" />
 
+        <com.miku.settings.preferences.SecureSettingListPreference
+            android:key="face_unlock_method"
+            android:order="16"
+            android:title="@string/face_unlock_method_title"
+            android:summary="%s"
+            android:dialogTitle="@string/face_unlock_method_title"
+            android:entries="@array/face_unlock_method_entries"
+            android:entryValues="@array/face_unlock_method_values"
+            android:defaultValue="0"
+            settings:searchable="false"
+            settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenUnlockMethodPreferenceController" />
+
         <SwitchPreference
             android:key="notification_lockscreen_bypass"
-            android:order="16"
+            android:order="17"
             android:title="@string/lockscreen_bypass_title"
             android:summary="@string/lockscreen_bypass_summary"
             settings:searchable="false"
diff --git a/res/xml/security_lockscreen_settings.xml b/res/xml/security_lockscreen_settings.xml
index 9860bf1cb4..b6d83046a7 100644
--- a/res/xml/security_lockscreen_settings.xml
+++ b/res/xml/security_lockscreen_settings.xml
@@ -28,6 +28,17 @@
             android:summary="@string/summary_placeholder"
             settings:keywords="@string/keywords_lock_screen_notif"/>
 
+        <com.miku.settings.preferences.SecureSettingListPreference
+            android:key="face_unlock_method"
+            android:title="@string/face_unlock_method_title"
+            android:summary="%s"
+            android:dialogTitle="@string/face_unlock_method_title"
+            android:entries="@array/face_unlock_method_entries"
+            android:entryValues="@array/face_unlock_method_values"
+            android:defaultValue="0"
+            settings:searchable="false"
+            settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenUnlockMethodPreferenceController" />
+
         <SwitchPreference
             android:key="security_dispaly_lockscreen_bypass"
             android:title="@string/lockscreen_bypass_title"
diff --git a/res/xml/security_settings_combined_biometric.xml b/res/xml/security_settings_combined_biometric.xml
index ef3a3fd1ff..9d94dc1776 100644
--- a/res/xml/security_settings_combined_biometric.xml
+++ b/res/xml/security_settings_combined_biometric.xml
@@ -43,7 +43,8 @@
     </PreferenceCategory>
 
     <PreferenceCategory
-        android:key="biometric_ways_to_use">
+        android:key="biometric_ways_to_use"
+        settings:controller="com.android.settings.biometrics.combination.BiometricWaysToUsePreferenceController">
 
         <com.android.settingslib.RestrictedSwitchPreference
             android:key="biometric_settings_biometric_keyguard"
diff --git a/res/xml/security_settings_face.xml b/res/xml/security_settings_face.xml
index f0d03507aa..047be8a2fe 100644
--- a/res/xml/security_settings_face.xml
+++ b/res/xml/security_settings_face.xml
@@ -33,12 +33,6 @@
             android:title="@string/biometric_settings_use_biometric_for_apps"
             settings:keywords="@string/keywords_face_unlock"
             settings:controller="com.android.settings.biometrics.face.FaceSettingsAppPreferenceController"/>
-        <com.android.settingslib.RestrictedSwitchPreference
-            android:key="security_lockscreen_bypass"
-            android:title="@string/lockscreen_bypass_title"
-            android:summary="@string/lockscreen_bypass_summary"
-            settings:keywords="@string/keywords_lockscreen_bypass"
-            settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenBypassPreferenceController" />
     </PreferenceCategory>
 
     <PreferenceCategory
@@ -58,25 +52,41 @@
             settings:keywords="@string/keywords_face_unlock"
             settings:controller="com.android.settings.biometrics.face.FaceSettingsConfirmPreferenceController"/>
 
+        <com.miku.settings.preferences.SecureSettingListPreference
+            android:key="face_unlock_method"
+            android:title="@string/face_unlock_method_title"
+            android:summary="%s"
+            android:dialogTitle="@string/face_unlock_method_title"
+            android:entries="@array/face_unlock_method_entries"
+            android:entryValues="@array/face_unlock_method_values"
+            android:defaultValue="0"
+            settings:searchable="false"
+            settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenUnlockMethodPreferenceController" />
+
         <com.android.settingslib.RestrictedSwitchPreference
-            android:key="biometric_settings_lockscreen_bypass"
+            android:key="security_lockscreen_bypass"
             android:title="@string/lockscreen_bypass_title"
             android:summary="@string/lockscreen_bypass_summary"
             settings:keywords="@string/keywords_lockscreen_bypass"
-            settings:controller="com.android.settings.biometrics.face.BiometricLockscreenBypassPreferenceController" />
+            settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenBypassPreferenceController" />
     </PreferenceCategory>
 
-    <com.android.settingslib.widget.LayoutPreference
-        android:key="security_settings_face_delete_faces_container"
+    <Preference
+        android:title="@string/security_settings_face_unlock_redo_face_scan_title"
+        android:key="security_settings_face_redo_face_scan"
+        android:summary="@string/security_settings_face_unlock_redo_face_scan_summary"
+        settings:controller="com.android.settings.custom.biometrics.face.FaceSettingsRedoPreferenceController"
+        settings:keywords="@string/keywords_face_unlock" />
+
+    <Preference
         android:title="@string/security_settings_face_settings_remove_face_model"
-        android:selectable="false"
-        android:layout="@layout/face_remove_button"/>
+        android:key="security_settings_face_delete_faces_container"
+        settings:keywords="@string/keywords_face_unlock"/>
 
-    <com.android.settingslib.widget.LayoutPreference
-        android:key="security_settings_face_enroll_faces_container"
+    <Preference
         android:title="@string/security_settings_face_settings_enroll"
-        android:selectable="false"
-        android:layout="@layout/face_enroll_button"/>
+        android:key="security_settings_face_enroll_faces_container"
+        settings:keywords="@string/keywords_face_unlock"/>
 
     <com.android.settingslib.widget.FooterPreference
         android:key="security_face_footer"
diff --git a/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java b/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
index 7f3bc87aae..a3c03c3e82 100644
--- a/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
+++ b/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
@@ -58,7 +58,7 @@ public abstract class BiometricEnrollIntroduction extends BiometricEnrollBase
     private static final String KEY_CONFIRMING_CREDENTIALS = "confirming_credentials";
 
     private UserManager mUserManager;
-    private boolean mHasPassword;
+    protected boolean mHasPassword;
     private boolean mBiometricUnlockDisabledByAdmin;
     private TextView mErrorText;
     protected boolean mConfirmingCredentials;
diff --git a/src/com/android/settings/biometrics/combination/BiometricSettingsAppPreferenceController.java b/src/com/android/settings/biometrics/combination/BiometricSettingsAppPreferenceController.java
index a46ae7a728..ab2a43ca29 100644
--- a/src/com/android/settings/biometrics/combination/BiometricSettingsAppPreferenceController.java
+++ b/src/com/android/settings/biometrics/combination/BiometricSettingsAppPreferenceController.java
@@ -23,6 +23,7 @@ import android.hardware.face.FaceManager;
 import android.hardware.fingerprint.FingerprintManager;
 import android.provider.Settings;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.Utils;
 import com.android.settings.core.TogglePreferenceController;
 import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
@@ -69,7 +70,7 @@ public class BiometricSettingsAppPreferenceController extends TogglePreferenceCo
 
     @Override
     public int getAvailabilityStatus() {
-        if (!Utils.isMultipleBiometricsSupported(mContext)) {
+        if (!Utils.isMultipleBiometricsSupported(mContext) || FaceUtils.isFaceUnlockSupported()) {
             return UNSUPPORTED_ON_DEVICE;
         }
         if (mFaceManager == null || mFingerprintManager == null) {
diff --git a/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java b/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java
index 2d2255805c..53c9a0dabc 100644
--- a/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java
+++ b/src/com/android/settings/biometrics/combination/BiometricSettingsKeyguardPreferenceController.java
@@ -21,6 +21,7 @@ import android.app.admin.DevicePolicyManager;
 import android.content.Context;
 import android.provider.Settings;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.Utils;
 import com.android.settings.core.TogglePreferenceController;
 import com.android.settingslib.RestrictedLockUtils;
@@ -63,7 +64,7 @@ public class BiometricSettingsKeyguardPreferenceController extends TogglePrefere
 
     @Override
     public int getAvailabilityStatus() {
-        if (!Utils.isMultipleBiometricsSupported(mContext)) {
+        if (FaceUtils.isFaceUnlockSupported() || !Utils.isMultipleBiometricsSupported(mContext)) {
             return UNSUPPORTED_ON_DEVICE;
         }
         return getRestrictingAdmin() != null ? DISABLED_FOR_USER : AVAILABLE;
diff --git a/src/com/android/settings/biometrics/combination/BiometricWaysToUsePreferenceController.java b/src/com/android/settings/biometrics/combination/BiometricWaysToUsePreferenceController.java
new file mode 100644
index 0000000000..d034202fe7
--- /dev/null
+++ b/src/com/android/settings/biometrics/combination/BiometricWaysToUsePreferenceController.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (C) 2021 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.android.settings.biometrics.combination;
+
+import android.content.Context;
+
+import com.android.settings.custom.biometrics.FaceUtils;
+import com.android.settings.Utils;
+import com.android.settings.core.BasePreferenceController;
+
+public class BiometricWaysToUsePreferenceController extends BasePreferenceController {
+
+    public BiometricWaysToUsePreferenceController(Context context, String key) {
+        super(context, key);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
+    }
+}
diff --git a/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java b/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
index eadb5b8c4f..a3689fb133 100644
--- a/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
+++ b/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
@@ -18,6 +18,7 @@ package com.android.settings.biometrics.face;
 
 import android.app.admin.DevicePolicyManager;
 import android.app.settings.SettingsEnums;
+import android.content.ComponentName;
 import android.content.Intent;
 import android.hardware.SensorPrivacyManager;
 import android.hardware.biometrics.BiometricAuthenticator;
@@ -34,6 +35,7 @@ import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 import androidx.annotation.StringRes;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.R;
 import com.android.settings.Utils;
 import com.android.settings.biometrics.BiometricEnrollActivity;
@@ -63,6 +65,8 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
     @Nullable private FooterButton mSecondaryFooterButton;
     @Nullable private SensorPrivacyManager mSensorPrivacyManager;
 
+    private boolean mForRedo;
+
     @Override
     protected void onCancelButtonClick(View view) {
         if (!BiometricUtils.tryStartingNextBiometricEnroll(this, ENROLL_NEXT_BIOMETRIC_REQUEST,
@@ -135,6 +139,7 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
             infoMessageRequireEyes.setText(getInfoMessageRequireEyes());
         }
 
+        mForRedo = getIntent().getBooleanExtra("for_redo", false);
         mFaceManager = Utils.getFaceManagerOrNull(this);
         mFaceFeatureProvider = FeatureFactory.getFactory(getApplicationContext())
                 .getFaceFeatureProvider();
@@ -163,6 +168,10 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
         final boolean cameraPrivacyEnabled = helper
                 .isSensorBlocked(SensorPrivacyManager.Sensors.CAMERA, mUserId);
         Log.v(TAG, "cameraPrivacyEnabled : " + cameraPrivacyEnabled);
+
+        if (FaceUtils.isFaceUnlockSupported() && mHasPassword && mToken != null) {
+            openCustomFaceUnlockPackage();
+        }
     }
 
     protected boolean generateChallengeOnCreate() {
@@ -207,6 +216,9 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
 
     @Override
     protected int getLayoutResource() {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            return R.layout.face_enroll_introduction_invisible;
+        }
         return R.layout.face_enroll_introduction;
     }
 
@@ -382,4 +394,68 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
     protected int getMoreButtonTextRes() {
         return R.string.security_settings_face_enroll_introduction_more;
     }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (!FaceUtils.isFaceUnlockSupported()) {
+            return;
+        }
+        if (requestCode != CHOOSE_LOCK_GENERIC_REQUEST) {
+            if (requestCode != CONFIRM_REQUEST) {
+                if (requestCode == ENROLL_REQUEST) {
+                    if (resultCode == RESULT_FIRST_USER || resultCode == RESULT_OK) {
+                        setResult(RESULT_FIRST_USER);
+                        finish();
+                        return;
+                    }
+                    setResult(RESULT_CANCELED);
+                    finish();
+                }
+            } else if (resultCode == RESULT_OK && data != null) {
+                checkTokenAndOpenCustomFaceUnlockPackage(data);
+            }
+        } else if (resultCode == RESULT_FIRST_USER) {
+            checkTokenAndOpenCustomFaceUnlockPackage(data);
+        }
+    }
+
+    private void openCustomFaceUnlockPackage() {
+        ComponentName componentName;
+        Intent intent = new Intent();
+        intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN, mToken);
+        if (mUserId != -10000) {
+            intent.putExtra("android.intent.extra.USER_ID", mUserId);
+        }
+        if (mForRedo) {
+            componentName = new ComponentName(
+                "org.pixelexperience.faceunlock",
+                "org.pixelexperience.faceunlock.FaceEnrollActivity");
+        } else {
+            componentName = new ComponentName(
+                "org.pixelexperience.faceunlock",
+                "org.pixelexperience.faceunlock.SetupFaceIntroActivity");
+        }
+        intent.setComponent(componentName);
+        if (intent.resolveActivity(getPackageManager()) != null) {
+            startActivityForResult(intent, ENROLL_REQUEST);
+        }
+    }
+
+    private void checkTokenAndOpenCustomFaceUnlockPackage(Intent intent) {
+        if (mToken == null) {
+            mFaceManager.generateChallenge(mUserId, (sensorId, userId, challenge) -> {
+                if (mToken == null) {
+                    mToken = BiometricUtils.requestGatekeeperHat(this, intent, mUserId,
+                            challenge);
+                    mSensorId = sensorId;
+                    mChallenge = challenge;
+                    BiometricUtils.removeGatekeeperPasswordHandle(this, intent);
+                    openCustomFaceUnlockPackage();
+                }
+            });
+        } else {
+            openCustomFaceUnlockPackage();
+        }
+    }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java b/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
index 99145f8778..c4dd5c2df3 100644
--- a/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
@@ -22,6 +22,7 @@ import android.os.UserHandle;
 import androidx.lifecycle.Lifecycle;
 import androidx.preference.Preference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.R;
 
 public class FaceProfileStatusPreferenceController extends FaceStatusPreferenceController {
@@ -46,6 +47,9 @@ public class FaceProfileStatusPreferenceController extends FaceStatusPreferenceC
 
     @Override
     public int getAvailabilityStatus() {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            return UNSUPPORTED_ON_DEVICE;
+        }
         // Check if Face for Profile is available.
         final int isAvailable = super.getAvailabilityStatus();
         if (isAvailable != AVAILABLE) {
diff --git a/src/com/android/settings/biometrics/face/FaceSettings.java b/src/com/android/settings/biometrics/face/FaceSettings.java
index 62347ac8ce..ce584d085e 100644
--- a/src/com/android/settings/biometrics/face/FaceSettings.java
+++ b/src/com/android/settings/biometrics/face/FaceSettings.java
@@ -34,6 +34,8 @@ import android.util.Log;
 
 import androidx.preference.Preference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+import com.android.settings.custom.biometrics.face.FaceSettingsRedoPreferenceController;
 import com.android.settings.R;
 import com.android.settings.SettingsActivity;
 import com.android.settings.Utils;
@@ -74,6 +76,7 @@ public class FaceSettings extends DashboardFragment {
     private FaceSettingsRemoveButtonPreferenceController mRemoveController;
     private FaceSettingsEnrollButtonPreferenceController mEnrollController;
     private FaceSettingsLockscreenBypassPreferenceController mLockscreenController;
+    private FaceSettingsRedoPreferenceController mRedoController;
     private List<AbstractPreferenceController> mControllers;
 
     private List<Preference> mTogglePreferences;
@@ -84,6 +87,12 @@ public class FaceSettings extends DashboardFragment {
     private boolean mConfirmingPassword;
 
     private final FaceSettingsRemoveButtonPreferenceController.Listener mRemovalListener = () -> {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            if (getActivity() != null) {
+                getActivity().finish();
+            }
+            return;
+        }
 
         // Disable the toggles until the user re-enrolls
         for (Preference preference : mTogglePreferences) {
@@ -161,9 +170,7 @@ public class FaceSettings extends DashboardFragment {
                     R.string.security_settings_face_profile_preference_title));
         }
 
-        mLockscreenController = Utils.isMultipleBiometricsSupported(context)
-                ? use(BiometricLockscreenBypassPreferenceController.class)
-                : use(FaceSettingsLockscreenBypassPreferenceController.class);
+        mLockscreenController = use(FaceSettingsLockscreenBypassPreferenceController.class);
         mLockscreenController.setUserId(mUserId);
 
         Preference keyguardPref = findPreference(FaceSettingsKeyguardPreferenceController.KEY);
@@ -188,6 +195,10 @@ public class FaceSettings extends DashboardFragment {
         }
         mRemoveController.setUserId(mUserId);
 
+        if (mRedoController != null) {
+            mRedoController.setUserId(mUserId);
+        }
+
         // Don't show keyguard controller for work profile settings.
         if (mUserManager.isManagedProfile(mUserId)) {
             removePreference(FaceSettingsKeyguardPreferenceController.KEY);
@@ -222,6 +233,7 @@ public class FaceSettings extends DashboardFragment {
         } else {
             mAttentionController.setToken(mToken);
             mEnrollController.setToken(mToken);
+            mRedoController.setToken(mToken);
         }
 
         final boolean hasEnrolled = mFaceManager.hasEnrolledTemplates(mUserId);
@@ -302,6 +314,9 @@ public class FaceSettings extends DashboardFragment {
                 mEnrollController = (FaceSettingsEnrollButtonPreferenceController) controller;
                 mEnrollController.setListener(mEnrollListener);
                 mEnrollController.setActivity((SettingsActivity) getActivity());
+            } else if (controller instanceof FaceSettingsRedoPreferenceController) {
+                mRedoController = (FaceSettingsRedoPreferenceController) controller;
+                mRedoController.setActivity((SettingsActivity) getActivity());
             }
         }
 
@@ -316,6 +331,7 @@ public class FaceSettings extends DashboardFragment {
         controllers.add(new FaceSettingsRemoveButtonPreferenceController(context));
         controllers.add(new FaceSettingsConfirmPreferenceController(context));
         controllers.add(new FaceSettingsEnrollButtonPreferenceController(context));
+        controllers.add(new FaceSettingsRedoPreferenceController(context));
         return controllers;
     }
 
@@ -357,6 +373,10 @@ public class FaceSettings extends DashboardFragment {
                         keys.add(FaceSettingsAttentionPreferenceController.KEY);
                     }
 
+                    if (FaceUtils.isFaceUnlockSupported()) {
+                        keys.add("security_settings_face_unlock_category");
+                    }
+
                     return keys;
                 }
 
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
index c296e56aa0..f40aff8812 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
@@ -24,6 +24,7 @@ import android.provider.Settings;
 
 import androidx.preference.Preference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.Utils;
 
 /**
@@ -79,7 +80,7 @@ public class FaceSettingsAppPreferenceController extends FaceSettingsPreferenceC
     @Override
     public int getAvailabilityStatus() {
         // When the device supports multiple biometrics auth, this preference will be hidden.
-        if (Utils.isMultipleBiometricsSupported(mContext)) {
+        if (Utils.isMultipleBiometricsSupported(mContext) && !FaceUtils.isFaceUnlockSupported()) {
             return UNSUPPORTED_ON_DEVICE;
         }
 
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
index 82fa00b864..2dded2f775 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
@@ -25,6 +25,7 @@ import android.provider.Settings;
 import androidx.preference.PreferenceScreen;
 import androidx.preference.SwitchPreference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.Utils;
 
 /**
@@ -118,6 +119,6 @@ public class FaceSettingsAttentionPreferenceController extends FaceSettingsPrefe
 
     @Override
     public int getAvailabilityStatus() {
-        return AVAILABLE;
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
index 60f8b21d4f..f5d1db534a 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
@@ -26,6 +26,7 @@ import android.provider.Settings;
 
 import androidx.preference.Preference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.Utils;
 
 import java.util.List;
@@ -79,6 +80,9 @@ public class FaceSettingsConfirmPreferenceController extends FaceSettingsPrefere
 
     @Override
     public int getAvailabilityStatus() {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            return UNSUPPORTED_ON_DEVICE;
+        }
         List<FaceSensorProperties> properties = mFaceManager.getSensorProperties();
         // If a sensor is convenience, it is possible that it becomes weak or strong with
         // an update. For this reason, the sensor is conditionally unavailable.
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
index b3e0e1ea88..d7893eead0 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
@@ -20,8 +20,6 @@ import static com.android.settings.Utils.SETTINGS_PACKAGE_NAME;
 
 import android.content.Context;
 import android.content.Intent;
-import android.view.View;
-import android.widget.Button;
 
 import androidx.preference.Preference;
 
@@ -31,14 +29,13 @@ import com.android.settings.core.BasePreferenceController;
 import com.android.settings.password.ChooseLockSettingsHelper;
 import com.android.settingslib.widget.LayoutPreference;
 
-import com.google.android.setupdesign.util.ButtonStyler;
 import com.google.android.setupdesign.util.PartnerStyleHelper;
 
 /**
  * Preference controller that allows a user to enroll their face.
  */
 public class FaceSettingsEnrollButtonPreferenceController extends BasePreferenceController
-        implements View.OnClickListener {
+        implements Preference.OnPreferenceClickListener {
 
     private static final String TAG = "FaceSettings/Remove";
     static final String KEY = "security_settings_face_enroll_faces_container";
@@ -48,7 +45,6 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
     private int mUserId;
     private byte[] mToken;
     private SettingsActivity mActivity;
-    private Button mButton;
     private boolean mIsClicked;
     private Listener mListener;
 
@@ -64,19 +60,11 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
     @Override
     public void updateState(Preference preference) {
         super.updateState(preference);
-
-        mButton = ((LayoutPreference) preference).findViewById(
-                R.id.security_settings_face_settings_enroll_button);
-
-        if (PartnerStyleHelper.shouldApplyPartnerResource(mButton)) {
-            ButtonStyler.applyPartnerCustomizationPrimaryButtonStyle(mContext, mButton);
-        }
-
-        mButton.setOnClickListener(this);
+        preference.setOnPreferenceClickListener(this);
     }
 
     @Override
-    public void onClick(View v) {
+    public boolean onPreferenceClick(Preference preference) {
         mIsClicked = true;
         final Intent intent = new Intent();
         intent.setClassName(SETTINGS_PACKAGE_NAME, FaceEnrollIntroduction.class.getName());
@@ -87,6 +75,7 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
         } else {
             mContext.startActivity(intent);
         }
+        return true;
     }
 
     @Override
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
index 342d786482..296cbc3ace 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
@@ -24,6 +24,7 @@ import android.provider.Settings;
 
 import androidx.preference.Preference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.Utils;
 import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
 import com.android.settingslib.RestrictedSwitchPreference;
@@ -71,7 +72,8 @@ public class FaceSettingsKeyguardPreferenceController extends FaceSettingsPrefer
     @Override
     public int getAvailabilityStatus() {
         // When the device supports multiple biometrics auth, this preference will be unavailable.
-        return Utils.isMultipleBiometricsSupported(mContext) ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
+        return Utils.isMultipleBiometricsSupported(mContext)
+                || FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 
     @Override
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
index c0cb64ec6b..b2457b1c8b 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
@@ -83,16 +83,15 @@ public class FaceSettingsLockscreenBypassPreferenceController
 
     @Override
     public int getAvailabilityStatus() {
-        // When the device supports multiple biometrics auth, this preference won't be shown
-        // in face unlock category.
-        if (Utils.isMultipleBiometricsSupported(mContext)) {
-            return UNSUPPORTED_ON_DEVICE;
-        }
         if (mUserManager.isManagedProfile(getUserId())) {
             return UNSUPPORTED_ON_DEVICE;
         }
 
-        if (mFaceManager != null && mFaceManager.isHardwareDetected()) {
+        boolean faceAuthOnlyOnSecurityView  = mContext.getResources().getBoolean(
+                com.android.internal.R.bool.config_faceAuthOnlyOnSecurityView);
+
+        if (mFaceManager != null && mFaceManager.isHardwareDetected() &&
+                !faceAuthOnlyOnSecurityView) {
             return mFaceManager.hasEnrolledTemplates(getUserId())
                     ? AVAILABLE : DISABLED_DEPENDENT_SETTING;
         } else {
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsLockscreenUnlockMethodPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenUnlockMethodPreferenceController.java
new file mode 100644
index 0000000000..cdd91030ee
--- /dev/null
+++ b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenUnlockMethodPreferenceController.java
@@ -0,0 +1,60 @@
+/*
+ * Copyright (C) 2019 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License
+ */
+
+package com.android.settings.biometrics.face;
+
+import android.content.Context;
+import android.content.pm.PackageManager;
+import android.hardware.face.FaceManager;
+import android.os.UserHandle;
+import android.os.UserManager;
+
+import com.android.settings.core.BasePreferenceController;
+
+public class FaceSettingsLockscreenUnlockMethodPreferenceController
+        extends BasePreferenceController {
+
+    protected FaceManager mFaceManager;
+    private UserManager mUserManager;
+
+    public FaceSettingsLockscreenUnlockMethodPreferenceController(
+            Context context, String preferenceKey) {
+        super(context, preferenceKey);
+        if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_FACE)) {
+            mFaceManager = context.getSystemService(FaceManager.class);
+        }
+
+        mUserManager = context.getSystemService(UserManager.class);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        if (mUserManager.isManagedProfile(UserHandle.myUserId())) {
+            return UNSUPPORTED_ON_DEVICE;
+        }
+
+        boolean faceAuthOnlyOnSecurityView  = mContext.getResources().getBoolean(
+                com.android.internal.R.bool.config_faceAuthOnlyOnSecurityView);
+
+        if (mFaceManager != null && mFaceManager.isHardwareDetected() &&
+                !faceAuthOnlyOnSecurityView) {
+            return mFaceManager.hasEnrolledTemplates(UserHandle.myUserId())
+                    ? AVAILABLE : DISABLED_DEPENDENT_SETTING;
+        } else {
+            return UNSUPPORTED_ON_DEVICE;
+        }
+    }
+}
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
index 616b736b8d..f4bb151a85 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
@@ -25,8 +25,6 @@ import android.hardware.face.Face;
 import android.hardware.face.FaceManager;
 import android.os.Bundle;
 import android.util.Log;
-import android.view.View;
-import android.widget.Button;
 import android.widget.Toast;
 
 import androidx.preference.Preference;
@@ -40,9 +38,6 @@ import com.android.settings.overlay.FeatureFactory;
 import com.android.settingslib.core.instrumentation.MetricsFeatureProvider;
 import com.android.settingslib.widget.LayoutPreference;
 
-import com.google.android.setupdesign.util.ButtonStyler;
-import com.google.android.setupdesign.util.PartnerStyleHelper;
-
 import java.util.List;
 
 /**
@@ -50,7 +45,7 @@ import java.util.List;
  * will likely change if multiple enrollments are allowed/supported.
  */
 public class FaceSettingsRemoveButtonPreferenceController extends BasePreferenceController
-        implements View.OnClickListener {
+        implements Preference.OnPreferenceClickListener {
 
     private static final String TAG = "FaceSettings/Remove";
     static final String KEY = "security_settings_face_delete_faces_container";
@@ -94,7 +89,6 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     }
 
     private Preference mPreference;
-    private Button mButton;
     private Listener mListener;
     private SettingsActivity mActivity;
     private int mUserId;
@@ -117,7 +111,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
             if (remaining == 0) {
                 final List<Face> faces = mFaceManager.getEnrolledFaces(mUserId);
                 if (!faces.isEmpty()) {
-                    mButton.setEnabled(true);
+                    mPreference.setEnabled(true);
                 } else {
                     mRemoving = false;
                     mListener.onRemoved();
@@ -133,7 +127,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
         @Override
         public void onClick(DialogInterface dialog, int which) {
             if (which == DialogInterface.BUTTON_POSITIVE) {
-                mButton.setEnabled(false);
+                mPreference.setEnabled(false);
                 final List<Face> faces = mFaceManager.getEnrolledFaces(mUserId);
                 if (faces.isEmpty()) {
                     Log.e(TAG, "No faces");
@@ -146,7 +140,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
                 // Remove the first/only face
                 mFaceManager.remove(faces.get(0), mUserId, mRemovalCallback);
             } else {
-                mButton.setEnabled(true);
+                mPreference.setEnabled(true);
                 mRemoving = false;
             }
         }
@@ -170,21 +164,13 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     @Override
     public void updateState(Preference preference) {
         super.updateState(preference);
-
         mPreference = preference;
-        mButton = ((LayoutPreference) preference)
-                .findViewById(R.id.security_settings_face_settings_remove_button);
-
-        if (PartnerStyleHelper.shouldApplyPartnerResource(mButton)) {
-            ButtonStyler.applyPartnerCustomizationPrimaryButtonStyle(mContext, mButton);
-        }
-
-        mButton.setOnClickListener(this);
+        mPreference.setOnPreferenceClickListener(this);
 
         if (!FaceSettings.isFaceHardwareDetected(mContext)) {
-            mButton.setEnabled(false);
+            mPreference.setEnabled(false);
         } else {
-            mButton.setEnabled(!mRemoving);
+            mPreference.setEnabled(!mRemoving);
         }
     }
 
@@ -199,15 +185,14 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     }
 
     @Override
-    public void onClick(View v) {
-        if (v == mButton) {
-            mMetricsFeatureProvider.logClickedPreference(mPreference, getMetricsCategory());
-            mRemoving = true;
-            ConfirmRemoveDialog dialog = new ConfirmRemoveDialog();
-            dialog.setOnClickListener(mOnClickListener);
-            dialog.setIsConvenience(BiometricUtils.isConvenience(mFaceManager));
-            dialog.show(mActivity.getSupportFragmentManager(), ConfirmRemoveDialog.class.getName());
-        }
+    public boolean onPreferenceClick(Preference preference) {
+        mMetricsFeatureProvider.logClickedPreference(mPreference, getMetricsCategory());
+        mRemoving = true;
+        ConfirmRemoveDialog dialog = new ConfirmRemoveDialog();
+        dialog.setOnClickListener(mOnClickListener);
+        dialog.setIsConvenience(BiometricUtils.isConvenience(mFaceManager));
+        dialog.show(mActivity.getSupportFragmentManager(), ConfirmRemoveDialog.class.getName());
+        return true;
     }
 
     public void setListener(Listener listener) {
diff --git a/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java b/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
index 319166ecff..b35d51758b 100644
--- a/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
@@ -19,6 +19,7 @@ package com.android.settings.biometrics.face;
 import android.content.Context;
 import android.hardware.biometrics.BiometricAuthenticator;
 import android.hardware.face.FaceManager;
+import androidx.preference.Preference;
 
 import androidx.annotation.Nullable;
 import androidx.lifecycle.Lifecycle;
@@ -28,6 +29,7 @@ import androidx.preference.Preference;
 import androidx.preference.PreferenceScreen;
 
 import com.android.internal.annotations.VisibleForTesting;
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.R;
 import com.android.settings.Settings;
 import com.android.settings.Utils;
@@ -91,6 +93,9 @@ public class FaceStatusPreferenceController extends BiometricStatusPreferenceCon
     public void updateState(Preference preference) {
         super.updateState(preference);
         updateStateInternal();
+        if (FaceUtils.isFaceUnlockSupported()) {
+            preference.setEnabled(!FaceUtils.isFaceDisabledByAdmin(mContext));
+        }
     }
 
     private void updateStateInternal() {
@@ -107,12 +112,18 @@ public class FaceStatusPreferenceController extends BiometricStatusPreferenceCon
 
     @Override
     protected String getSummaryTextEnrolled() {
+        if (FaceUtils.isFaceUnlockSupported() && FaceUtils.isFaceDisabledByAdmin(mContext)) {
+            return mContext.getResources().getString(R.string.disabled_by_administrator_summary);
+        }
         return mContext.getResources()
                 .getString(R.string.security_settings_face_preference_summary);
     }
 
     @Override
     protected String getSummaryTextNoneEnrolled() {
+        if (FaceUtils.isFaceUnlockSupported() && FaceUtils.isFaceDisabledByAdmin(mContext)) {
+            return mContext.getResources().getString(R.string.disabled_by_administrator_summary);
+        }
         return mContext.getResources()
                 .getString(R.string.security_settings_face_preference_summary_none);
     }
diff --git a/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java b/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java
index d0debdfe59..ec2eee68c3 100644
--- a/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceUnlockCategoryPreferenceController.java
@@ -17,6 +17,7 @@ package com.android.settings.biometrics.face;
 
 import android.content.Context;
 
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.Utils;
 import com.android.settings.core.BasePreferenceController;
 
@@ -31,6 +32,7 @@ public class FaceUnlockCategoryPreferenceController extends BasePreferenceContro
 
     @Override
     public int getAvailabilityStatus() {
-        return Utils.isMultipleBiometricsSupported(mContext) ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
+        return Utils.isMultipleBiometricsSupported(mContext)
+                && !FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 }
diff --git a/src/com/android/settings/custom/biometrics/FaceUtils.java b/src/com/android/settings/custom/biometrics/FaceUtils.java
new file mode 100644
index 0000000000..a44db3c303
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/FaceUtils.java
@@ -0,0 +1,32 @@
+package com.android.settings.custom.biometrics;
+
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import com.android.internal.util.custom.faceunlock.FaceUnlockUtils;
+
+public final class FaceUtils {
+    private static final String TAG = "FaceUtils";
+
+    public static boolean isFaceUnlockSupported() {
+        return FaceUnlockUtils.isFaceUnlockSupported();
+    }
+
+    public static boolean isFaceDisabledByAdmin(Context context) {
+        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) context.getSystemService(
+                "device_policy");
+        try {
+            if (devicePolicyManager.getPasswordQuality(null) > 32768) {
+                return true;
+            }
+        } catch (SecurityException e) {
+            Log.e(TAG, "isFaceDisabledByAdmin error:", e);
+        }
+        if ((devicePolicyManager.getKeyguardDisabledFeatures(null) & 128) != 0) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java b/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
new file mode 100644
index 0000000000..e94f705ba0
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
@@ -0,0 +1,36 @@
+package com.android.settings.custom.biometrics.face;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+
+import com.android.settings.biometrics.face.FaceEnrollIntroduction;
+import com.android.settings.custom.biometrics.FaceUtils;
+
+public class FaceEnrollActivity extends Activity {
+    private byte[] mToken;
+
+    @Override
+    public void onCreate(Bundle bundle) {
+        super.onCreate(bundle);
+        if (FaceUtils.isFaceUnlockSupported()) {
+            if (mToken == null) {
+                mToken = getIntent().getByteArrayExtra("hw_auth_token");
+            }
+            Intent faceIntroIntent = getFaceIntroIntent();
+            faceIntroIntent.putExtra("for_redo", getIntent().getBooleanExtra("for_redo", false));
+            faceIntroIntent.putExtra("hw_auth_token", mToken);
+            if (getCallingActivity() != null) {
+                faceIntroIntent.setFlags(33554432);
+            }
+            startActivity(faceIntroIntent);
+        }
+        finish();
+    }
+
+    private Intent getFaceIntroIntent() {
+        Intent intent = new Intent(this, FaceEnrollIntroduction.class);
+        intent.addFlags(268468224);
+        return intent;
+    }
+}
diff --git a/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java b/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java
new file mode 100644
index 0000000000..2bd2463017
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java
@@ -0,0 +1,144 @@
+package com.android.settings.custom.biometrics.face;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.face.Face;
+import android.hardware.face.FaceManager;
+import android.util.Log;
+import android.widget.Toast;
+
+import androidx.preference.Preference;
+
+import com.android.settings.R;
+import com.android.settings.SettingsActivity;
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.slices.SliceBackgroundWorker;
+import com.android.settings.biometrics.face.FaceSettings;
+import com.android.settings.custom.biometrics.FaceUtils;
+
+import java.util.List;
+
+public class FaceSettingsRedoPreferenceController extends BasePreferenceController implements
+        Preference.OnPreferenceClickListener {
+    static final String KEY = "security_settings_face_redo_face_scan";
+    private static final String TAG = "FaceSettings/Redo";
+    private SettingsActivity mActivity;
+    private final Context mContext;
+    private final FaceManager mFaceManager;
+    private final FaceManager.RemovalCallback mRemovalCallback;
+    private int mUserId;
+    private byte[] mToken;
+
+    @Override
+    public String getPreferenceKey() {
+        return KEY;
+    }
+
+    public FaceSettingsRedoPreferenceController(Context context, String str) {
+        super(context, str);
+        mRemovalCallback = new FaceManager.RemovalCallback() {
+            @Override
+            public void onRemovalError(Face face, int i, CharSequence charSequence) {
+                Log.e(FaceSettingsRedoPreferenceController.TAG,
+                        "Unable to remove face: " + face.getBiometricId()
+                                + " error: " + i + " " + ((Object) charSequence));
+                Toast.makeText(mContext, charSequence, 0).show();
+            }
+
+            @Override
+            public void onRemovalSucceeded(Face face, int i) {
+                if (i == 0) {
+                    Log.v(FaceSettingsRedoPreferenceController.TAG, "onRemovalSucceeded ");
+                    Intent intent = new Intent("com.android.settings.intent.action.FACE_ENROLL");
+                    intent.putExtra("for_face", true);
+                    intent.putExtra("for_redo", true);
+                    intent.putExtra("hw_auth_token", mToken);
+                    intent.addFlags(268435456);
+                    mContext.startActivity(intent);
+                    return;
+                }
+                Log.v(FaceSettingsRedoPreferenceController.TAG, "Remaining: " + i);
+            }
+        };
+        mContext = context;
+        mFaceManager = (FaceManager) context.getSystemService(FaceManager.class);
+    }
+
+    public FaceSettingsRedoPreferenceController(Context context) {
+        this(context, KEY);
+    }
+
+    public void setUserId(int i) {
+        mUserId = i;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        super.updateState(preference);
+        if (!FaceSettings.isFaceHardwareDetected(mContext) ||
+                !mFaceManager.hasEnrolledTemplates(mUserId)) {
+            preference.setEnabled(false);
+        } else {
+            preference.setEnabled(true);
+            preference.setOnPreferenceClickListener(this);
+        }
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return FaceUtils.isFaceUnlockSupported() ? AVAILABLE : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+        showFaceRedoWarningDialog();
+        return true;
+    }
+
+    public void setActivity(SettingsActivity settingsActivity) {
+        mActivity = settingsActivity;
+    }
+
+    private void deleteFace() {
+        List enrolledFaces = mFaceManager.getEnrolledFaces(mUserId);
+        if (enrolledFaces.isEmpty()) {
+            Log.e(TAG, "No faces");
+            return;
+        }
+        if (enrolledFaces.size() > 1) {
+            Log.e(TAG, "Multiple enrollments: " + enrolledFaces.size());
+        }
+        mFaceManager.remove((Face) enrolledFaces.get(0), mUserId, mRemovalCallback);
+    }
+
+    void showFaceRedoWarningDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(mActivity);
+        builder.setTitle(R.string.security_settings_face_unlock_redo_face_scan_title)
+                .setMessage(R.string.face_redo_warning_msg)
+                .setPositiveButton(R.string.face_redo_confirm_btn,
+                        new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                        deleteFace();
+                    }
+                })
+                .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                    @Override
+                    public void onClick(DialogInterface dialogInterface, int i) {
+                    }
+                })
+                .setOnCancelListener(new DialogInterface.OnCancelListener() {
+                    @Override
+                    public void onCancel(DialogInterface dialogInterface) {
+                    }
+                });
+        builder.create().show();
+    }
+
+    public void setToken(byte[] token) {
+        mToken = token;
+    }
+}
diff --git a/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java b/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
index e778e8c7ca..2bce843c98 100644
--- a/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
+++ b/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
@@ -28,6 +28,7 @@ import android.util.Log;
 
 import com.android.internal.app.AlertActivity;
 import com.android.internal.app.AlertController;
+import com.android.settings.custom.biometrics.FaceUtils;
 import com.android.settings.R;
 import com.android.settings.Utils;
 import com.android.settings.homepage.contextualcards.slices.FaceSetupSlice;
@@ -41,6 +42,8 @@ public class FaceReEnrollDialog extends AlertActivity implements
     private static final String TAG = "FaceReEnrollDialog";
 
     private static final String BIOMETRIC_ENROLL_ACTION = "android.settings.BIOMETRIC_ENROLL";
+    private static final String BIOMETRIC_ENROLL_ACTION_CUSTOM =
+        "com.android.settings.intent.action.FACE_ENROLL";
 
     private FaceManager mFaceManager;
     /**
@@ -110,7 +113,9 @@ public class FaceReEnrollDialog extends AlertActivity implements
                     return;
                 }
                 // Send user to the enroll flow.
-                final Intent reEnroll = new Intent(BIOMETRIC_ENROLL_ACTION);
+                final Intent reEnroll = new Intent(
+                    FaceUtils.isFaceUnlockSupported() ?
+                    BIOMETRIC_ENROLL_ACTION_CUSTOM : BIOMETRIC_ENROLL_ACTION);
                 final Context context = getApplicationContext();
 
                 try {
-- 
2.37.1

